apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      initContainers:
      - name: initcode
        image: alpine:3.7
        command:
        - sh
        - "-c"
        - |
          cd /usr/share/nginx/html
          apk add --no-cache git && git clone https://github.com/luan4637/phpblog.git .
          git reset --hard && git pull
        volumeMounts:
        - name: web-pvc
          mountPath: /usr/share/nginx/html
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: web-pvc
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
      - name: phpfpm
        image: registry:5000/phpfpm:latest
        # imagePullPolicy: Never
        ports:
        - containerPort: 9000
        startupProbe:
          exec:
            command:
            - sh
            - "-c"
            - |
              cd /usr/share/nginx/html
              ordinal=${HOSTNAME##*-}
              # if [[ $ordinal -eq 0 ]]; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
              php composer-setup.php
              php -r "unlink('composer-setup.php');"
              php composer.phar install --no-dev
              cp -f .env.kube .env
              chmod -R 777 /usr/share/nginx/html/storage
              php artisan migrate
              php artisan db:seed
              php artisan cache:clear
              # fi
          initialDelaySeconds: 5
          timeoutSeconds: 600
        volumeMounts:
        - name: web-pvc
          mountPath: /usr/share/nginx/html
          # readOnly: true
      volumes:
      # - name: www
      #   persistentVolumeClaim:
      #     claimName: www-pvc
      - name: nginx-config
        configMap:
          name: nginx-configmap
  volumeClaimTemplates:
  - metadata:
      name: web-pvc
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 500Mi
---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: www-pvc
# spec:
#   storageClassName: hostpath
#   accessModes:
#   - ReadWriteOnce
#   resources:
#     requests:
#       storage: 500Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configmap
data:
  nginx.conf: |
    upstream backend {
      server 127.0.0.1:9000;
    }

    server {
      listen 80;
      server_name phpblog.private;
      index index.php;

      root /usr/share/nginx/html/public;

      location / {
        try_files $uri $uri/ /index.php?$args;
      }

      location ~ \.php$ {
        fastcgi_index  index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
        fastcgi_pass backend;
      }
    }
  fpm.conf: |
    [global]
    daemonize = no

    [www]
    listen = 9000

    [www2]
    user = www-data
    group = www-data
    listen = 9001
    pm = dynamic
    pm.max_children = 5
    pm.start_servers = 2
    pm.min_spare_servers = 1
    pm.max_spare_servers = 3
---
apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: web